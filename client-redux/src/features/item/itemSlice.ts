import {createAsyncThunk, createSlice, Dispatch, PayloadAction} from "@reduxjs/toolkit";
import {RootState} from "../../app/store";
import {stringify} from "node:querystring";

export interface Item {
    name: string,
    rank: number,
}

export interface ItemsState {
    value: Item[];
    status: 'idle' | 'loading' | 'failed';
}

const initialState: ItemsState = {
    value: [],
    status: 'idle',
};

async function webGet(path: string, data?: any) {
    const response = await fetch(path, {
        method: "GET",
        // mode: 'same-origin',
        cache: 'no-cache',
        headers: {
            'Content-Type': 'application/json',
            'X-Auth-Token': '123'
        },
        body: JSON.stringify(data)
    });

    return response;
}

export const getItemsAsync = createAsyncThunk("items/fetchItems", async () => {
    let response = await webGet("http://localhost:8080/items")
    return (await response.json()) as Item[];
})


export const itemsSlice = createSlice({
    name: 'items',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getItemsAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getItemsAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            })
            .addCase(getItemsAsync.rejected, (state) => {
                state.status = 'failed';
            });
    },
});


export const selectRanks = (state: RootState) => state.items.value

export default itemsSlice.reducer;
