import {createAsyncThunk, createSlice, PayloadAction} from "@reduxjs/toolkit";
import {RootState} from "../../app/store";
import {Item} from "./item";
import {webGet} from "../../webc";


export interface ItemsState {
    value: Item[];
    status: 'idle' | 'loading' | 'failed';
}

const initialState: ItemsState = {
    value: [],
    status: 'idle',
};


export const getItemsThunk = createAsyncThunk("items/fetchItems", async () => {
    let response = await webGet("items");
    console.log("response");
    console.log(response);
    return (await response) as Item[];
})

// const removeItem = (id: number) => {
//
//     const removeItemThunk = createAsyncThunk("items/removeItem", async () => {
//         const itemId = id;
//         const response = await
//
//     })
//
//     return removeItemThunk
// }

export const itemsSlice = createSlice({
    name: 'items',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // the payload is the id of the element to remove
        removeItem: (state, action: PayloadAction<number>) => {
            state.value = state.value.filter(i => i.id != action.payload)
        },
        addItem: (state, action: PayloadAction<Item>) => {
            state.value.push(action.payload)
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getItemsThunk.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getItemsThunk.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            })
            .addCase(getItemsThunk.rejected, (state) => {
                state.status = 'failed';
            });
    },
});


export const selectRanks = (state: RootState) => state.items.value

export default itemsSlice.reducer;
export const {removeItem, addItem} = itemsSlice.actions;
